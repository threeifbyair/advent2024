export module Day15;
import Advent2024;
import parser;

bp: namespace == boost::parser;

Day15: namespace = {

    export day : type = {
        this: Advent2024::day;

        operator= : (out this,  lines, part_two, verbose, argint) = {
            Advent2024::day = (lines, part_two, verbose, argint);
        }

        coords: @struct @ordered type = {
            x: int;
            y: int;
        }

        grid_t: type == std::vector<std::vector<char>>;

        m_grid: grid_t = ();
        m_moves: std::vector<char> = ();

        print_grid: (this) = {
            for m_grid do (line) {
                for line do (entry) {
                    std::cout << entry;
                }
                std::cout << std::endl;
            }
            std::cout << std::endl;
        }

        can_move : (inout this, copy current: coords, offset: coords, depth: size_t) -> bool = {
            //std::cout << std::string(depth, ' ') << "can_move ((current.x)$, (current.y)$) by ((offset.x)$, (offset.y)$), current is (m_grid[current.y][current.x])$, next is (m_grid[current.y + offset.y][current.x + offset.x])$, pair (is_pair)$... " << std::endl;
            current.x += offset.x;
            current.y += offset.y;
            if m_grid[current.y][current.x] == '#' {
                // Can't go there!
                return false;
            }
            else if m_grid[current.y][current.x] == '.' {
                // Can go there!
                return true;
            }
            else if m_grid[current.y][current.x] == 'O' {
                // It's a part 1 box! Let's see if we can move it.
                return can_move(current, offset, depth+2);
            }
            else if m_grid[current.y][current.x] == '[' {
                // It's the left side of a part 2 box.
                if offset.y == 0 {
                    // Treat it as a regular box.
                    return can_move(current, offset, depth+2);
                }
                else {
                    // We need to move this one AND the one to its right.
                    boxpair := coords(current.x+1, current.y);
                    return can_move(current, offset, depth+2) && can_move(boxpair, offset, depth+2);
                }
            }
            else if m_grid[current.y][current.x] == ']' {
                // It's the right side of a part 2 box.
                if offset.y == 0 {
                    // Treat it as a regular box.
                    return can_move(current, offset, depth+2);
                }
                else {
                    // We need to move this one AND the one to its left.
                    boxpair := coords(current.x-1, current.y);
                    return can_move(current, offset, depth+2) && can_move(boxpair, offset, depth+2);
                }
            }
            else {
                assert(false);
                return false;
            }
        }

        do_move : (inout this, copy current: coords, offset: coords, depth: size_t) = {
            //std::cout << std::string(depth, ' ') << "entering do_move ((current.x)$, (current.y)$) by ((offset.x)$, (offset.y)$), current is (m_grid[current.y][current.x])$, next is (m_grid[current.y + offset.y][current.x + offset.x])$, pair (is_pair)$... " << std::endl;
            current.x += offset.x;
            current.y += offset.y;
            assert(m_grid[current.y][current.x] != '#'); 
            if m_grid[current.y][current.x] == '.' {
                // We're done!
                return;
            }
            else if m_grid[current.y][current.x] == 'O' {
                // It's a part 1 box! Let's see if we can move it.
                do_move(current, offset, depth+2);
                m_grid[current.y][current.x] = '.';
                current.x += offset.x;
                current.y += offset.y;
                assert(m_grid[current.y][current.x] == '.');
                m_grid[current.y][current.x] = 'O';
            }
            else if m_grid[current.y][current.x] == '[' {
                // It's the left side of a part 2 box.
                if offset.y == 0 {
                    // Treat it as a regular box.
                    do_move(current, offset, depth+2);
                }
                else {
                    // We need to move this one AND the one to its right.
                    boxpair := coords(current.x+1, current.y);
                    do_move(current, offset, depth+2);
                    //std::cout << std::string(depth, ' ') << "now moving pair ((boxpair.x)$, (boxpair.y)$) containing (m_grid[boxpair.y][boxpair.x])$ by ((offset.x)$, (offset.y)$)..." << std::endl;
                    do_move(boxpair, offset, depth+2);
                    m_grid[boxpair.y][boxpair.x] = '.';
                    boxpair.x += offset.x;
                    boxpair.y += offset.y;
                    assert(m_grid[boxpair.y][boxpair.x] == '.');
                    m_grid[boxpair.y][boxpair.x] = ']';
                }
                m_grid[current.y][current.x] = '.';
                current.x += offset.x;
                current.y += offset.y;
                assert(m_grid[current.y][current.x] == '.');
                m_grid[current.y][current.x] = '[';
            }
            else if m_grid[current.y][current.x] == ']' {
                // It's the right side of a part 2 box.
                if offset.y == 0 {
                    // Treat it as a regular box.
                    do_move(current, offset, depth+2);
                }
                else {
                    // We need to move this one AND the one to its left.
                    boxpair := coords(current.x-1, current.y);
                    do_move(current, offset, depth+2);
                    //std::cout << std::string(depth, ' ') << "now moving pair ((boxpair.x)$, (boxpair.y)$) containing (m_grid[boxpair.y][boxpair.x])$ by ((offset.x)$, (offset.y)$)..." << std::endl;
                    do_move(boxpair, offset, depth+2);
                    m_grid[boxpair.y][boxpair.x] = '.';
                    boxpair.x += offset.x;
                    boxpair.y += offset.y;
                    assert(m_grid[boxpair.y][boxpair.x] == '.');
                    m_grid[boxpair.y][boxpair.x] = '[';
                }
                m_grid[current.y][current.x] = '.';
                current.x += offset.x;
                current.y += offset.y;
                assert(m_grid[current.y][current.x] == '.');
                m_grid[current.y][current.x] = ']';
            }
            else {
                assert(false);
            }
        }

        run : (override inout this) -> i64 = {
            
            total : i64 = 0;

            in_moves := false;
            for m_lines do (line) {
                // Before the blank line, we get a maze.
                if line.size() == 0 {
                    in_moves = true;
                }
                else {
                    if in_moves {
                        _ = m_moves.insert(m_moves.end(), line.begin(), line.end());
                    }
                    else {
                        if m_part_two {
                            gridline: std::vector<char> = ();
                            for line do (chr) {
                                if chr == '.' || chr == '#' {
                                    gridline.push_back(chr);
                                    gridline.push_back(chr);
                                }
                                else if chr == 'O' {
                                    gridline.push_back('[');
                                    gridline.push_back(']');
                                }
                                else if chr == '@' {
                                    gridline.push_back('@');
                                    gridline.push_back('.');
                                }
                                else {
                                    assert(false);
                                }
                            }
                            m_grid.push_back(gridline);
                        }
                        else {
                            _ = m_grid.push_back(std::vector(line.begin(), line.end()));
                        }
                    }
                }
            }

            // OK, let's get started. First find the robot.
            maybe_robot : std::optional<coords> = std::nullopt;
            for 0..<m_grid.size() do (ry: int) {
                for 0 ..< m_grid[ry].size() do (rx: int) {
                    if m_grid[ry][rx] == '@' {
                        maybe_robot = coords(rx, ry);
                        break;
                    }
                }
            }
            assert(maybe_robot);
            robot := maybe_robot*;
            if m_verbose {
                print_grid();
            }
            for m_moves do (move_) {
                //offset : coords = inspect move_ -> coords {
                //    is '^' = coords(0, -1);
                //    is 'v' = coords(0, 1);
                //    is '<' = coords(-1, 0);
                //    is '>' = coords(1, 0);
                //    is _ = coords(0, 0);
                //};
                offset := coords(0, 0);
                if move_ == '^' {
                    offset = coords(0, -1);
                }
                else if move_ == 'v' {
                    offset = coords(0, 1);
                }
                else if move_ == '<' {
                    offset = coords(-1, 0);
                }
                else if move_ == '>' {
                    offset = coords(1, 0);
                }
                assert(offset != coords(0, 0));

                if can_move(robot, offset, 2UL) {
                    // We can move! Move the robot and update the grid.
                    do_move(robot, offset, 2UL);
                    m_grid[robot.y][robot.x] = '.';
                    robot.x += offset.x;
                    robot.y += offset.y;
                    assert(m_grid[robot.y][robot.x] == '.');
                    m_grid[robot.y][robot.x] = '@';
                }

                if m_verbose {
                    print_grid();
                }
            }

            for 0..<m_grid.size() do (ry) {
                for 0 ..< m_grid[ry].size() do (rx) {
                    if m_grid[ry][rx] == 'O' || m_grid[ry][rx] == '[' {
                        total += rx + 100 * ry;
                    }
                }
            }

           return total;
        }
    }
}