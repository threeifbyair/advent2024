export module Day6;
import Advent2024;

Day6: namespace = {
    export day : type = {
        this: Advent2024::day;

        operator= : (out this,  lines, part_two, verbose, argint) = {
            Advent2024::day = (lines, part_two, verbose, argint);
        }

        action: @struct type = {
            replace: bool;
            dx_once: int;
            dy_once: int;
            dx: int;
            dy: int;
            increment: bool;
            finished: bool;
        }

        hit_wall: (dx : int, dy: int) -> action = {
            // Oops, we hit a wall! Adjust ourselves to where we were, turn right, and back up one so we get back to where we were.
            if dx == -1 && dy == 0 {
                // If we were going west, jump southeast and point north.
                return action(false, 1, 1, 0, -1, false, false);
            }
            if dx == 0 && dy == -1 {
                // If we were going north, jump southwest and point east.
                return action(false, -1, 1, 1, 0, false, false);
            }
            if dx == 1 && dy == 0 {
                // If we were going east, jump northwest and point south.
                return action(false, -1, -1, 0, 1, false, false);
            }
            if dx == 0 && dy == 1 {
                // If we were going south, jump northeast and point west.
                return action(false, 1, -1, -1, 0, false, false);
            }
            assert(false);
            return action(false, 0, 0, 0, 0, false, false);
        }

        find_move: (loc: i8, dx: int, dy: int) -> action = {
            if loc == '^' {
                return action(true, 0, 0, dx, dy, true, false);
            }
            if loc == '.' {
                return action(true, 0, 0, dx, dy, true, false);
            }
            if loc == 'X' {
                return action(false, 0, 0, dx, dy, false, false);
            }
            if loc == '#' {
                return hit_wall(dx, dy);
            }
            if loc == '*' {
                return action(false, 0, 0, 0, 0, false, true);
            }
            assert(false);
            return action(false, 0, 0, 0, 0, false, false);
        }

        state: @struct type = 
        {
            x: int;
            y: int;
            dx: int;
            dy: int;
        }

        print_maze: (maze: std::vector<std::string>) = {
            for maze do (line) {
                std::cout << line << std::endl;
            }
        }

        run_maze: (this, maze: std::vector<std::string>, copy x: int, copy y: int, copy dx: int, copy dy: int, nest: bool) -> (total:int, exited:bool, out_maze:std::vector<std::string>) = {
            total = 0;
            exited = false;
            startx := x;
            starty := y;
            seen: std::unordered_set<int> = ();
            blocked: std::unordered_set<int> = ();
            working_maze : std::vector<std::string> = (maze.size(), "");
            for 0..<maze.size() do (i) {
                line_copy : std::string = maze[i];
                working_maze[i] = line_copy;
            }

            while true {
                hash := ((dx + 2) << 28) | ((dy + 2) << 26) |  (x << 12) | y;
                if seen.count(hash) {
                    exited = false;
                    break;
                }
                _ = seen.insert(hash);

                next := find_move(working_maze[y][x], dx, dy);

                // Now move.
                if next.replace {
                    working_maze[y][x] = 'X';
                }
                if next.increment && !nest {
                    total++;
                }
                if next.finished {
                    exited = true;
                    if m_verbose {
                        std::cout << "Exited at ((x)$, (y)$)" << std::endl;
                    }
                    break;
                }
                x += next.dx_once;
                y += next.dy_once;
                dx = next.dx;
                dy = next.dy;
                x += dx;
                y += dy;
                if nest {
                    // We need to see if putting a barrier here would cause a loop.
                    block_hash := (x << 12) | y;
                    if working_maze[y][x] != '*' && !blocked.count(block_hash) {
                        // Don't do this if we escaped or came here before!
                        new_maze : std::vector<std::string> = (maze.size(), "");
                        for 0..<maze.size() do (i) {
                            line_copy : std::string = maze[i];
                            new_maze[i] = line_copy;
                        }
                        new_maze[y][x] = '#';
                        if m_verbose {
                            std::cout << "Blocking ((x)$, (y)$) containing (maze[y][x])$..." << std::endl;
                            print_maze(new_maze);
                        }
                        inner := run_maze(new_maze, startx, starty, 0, -1, false);
                        if m_verbose {
                            if inner.exited {
                                std::cout << "Exited" << std::endl;
                            }
                            else {
                                std::cout << "Looped" << std::endl;
                            }
                            print_maze(inner.out_maze);
                        }
                        if !inner.exited {
                            total++;
                        }
                        _ = blocked.insert(block_hash);
                    }
                }
            }
            out_maze = working_maze;
        }


        run : (override inout this) -> i64 = {
            total: i64 = 0;

            // First put a boundary around the map to make sure we don't overstep. 
            for 0..<m_lines.size() do (y) {
                m_lines[y] = "*" + m_lines[y] + "*";
            }
            linelen := m_lines[0].size();
            boundary := std::string(linelen, '*');
            _ = m_lines.insert(m_lines.begin(), boundary);
            _ = m_lines.insert(m_lines.end(), boundary);

            x: size_t = 0;
            y: size_t = 0;
            dx: int = 0;
            dy: int = -1; // start going north

            // Where is the guard starting?
            for 0..<m_lines.size() do (starty) {
                startx := m_lines[starty].find('^');
                if startx != m_lines[starty].npos {
                    y = starty;
                    x = startx;
                    break;
                }
            }
            if m_verbose {
                print_maze(m_lines);
            }
            result := run_maze(m_lines, x, y, dx, dy, m_part_two);
            total = result.total;
            return total;
        }
    }
}
