export module Day16;
import Advent2024;

Day16: namespace = {
    export day : type = {
        this: Advent2024::day;

        operator= : (out this,  lines, part_two, verbose, argint) = {
            Advent2024::day = (lines, part_two, verbose, argint);
        }

        coords: @struct @ordered type = {
            x: int;
            y: int;
        }

        path: @struct type = {
            position: coords;
            direction: coords;
            visited: std::shared_ptr<std::vector<coords>>;
        }

        grid_t: type == std::vector<std::vector<char>>;

        m_grid: grid_t = ();
        m_moves: std::unordered_map<int64_t, int> = ();
        m_scores: std::map<int, std::vector<path>> = ();

        make_hash: (position: coords, direction: coords) -> int64_t = (position.x) | (position.y << 12) | ((direction.x+1) << 24) | ((direction.y+1) << 28);
        unmake_hash: (hash: int64_t) -> (position: coords, direction: coords) = {
            position = coords(0,0);
            direction = coords(0,0);
            position.x = hash & 0xFFF;
            position.y = (hash >> 12) & 0xFFF;
            direction.x = ((hash >> 24) & 0x3) - 1;
            direction.y = ((hash >> 28) & 0x3) - 1;
        }

        find_best_move: (inout this, position: coords, direction: coords) -> int = {
            m_scores[0] = (path(position, direction, shared.new<std::vector<coords>>(position)));
            winning_paths: std::vector<path> = ();
            winning_score: int = 0;
            while !winning_paths.size() {
                assert(m_scores.size() > 0UL);
                iter := m_scores.begin();
                score := iter*.first;
                paths := iter*.second;
                _ = m_scores.erase(score);
                for paths do (path_) {
                    if m_verbose {
                        std::cout << "Score (score)$: at ((path_.position.x)$, (path_.position.y)$) facing ((path_.direction.x)$, (path_.direction.y)$)" << std::endl;
                    }
                    if m_grid[path_.position.y][path_.position.x] == 'E' {
                        // We're done! (But we have to check others that tie.)
                        winning_score = score;
                        winning_paths.push_back(path_);
                    }
                    partial_hash := make_hash(path_.position, coords(0,0));
                    if !m_moves.count(partial_hash) {
                        // We haven't been here before. Explore the whole thing.
                        m_moves[partial_hash] = score;
                        if m_verbose {
                            std::cout << "Not seen, fully exploring..." << std::endl;
                        }
                        explore(coords(path_.position.x + path_.direction.x, path_.position.y + path_.direction.y), path_.direction, path_.visited*, score+1);
                        explore(coords(path_.position.x, path_.position.y), coords(path_.direction.y, path_.direction.x), path_.visited*, score+1000);
                        explore(coords(path_.position.x, path_.position.y), coords(-path_.direction.y, -path_.direction.x), path_.visited*, score+1000);
                    }
                    else if m_moves[partial_hash] >= score - 1000 {
                        // Explore forward only.
                        if m_verbose {
                            std::cout << "Seen with score (m_moves[partial_hash])$, exploring forward only..." << std::endl;
                        }
                        explore(coords(path_.position.x + path_.direction.x, path_.position.y + path_.direction.y), path_.direction, path_.visited*, score+1);
                    }
                    else {
                        if m_verbose {
                            std::cout << "Seen with score (m_moves[partial_hash])$, no point in exploring" << std::endl;
                        }
                    }
                }
            }
            // OK. We have a winning score.
            if m_part_two {
                visited : std::unordered_set<int64_t> = ();
                for winning_paths do (path_) {
                    for path_.visited* do (loc) {
                        partial_hash := make_hash(loc, coords(0,0));
                        _ = visited.insert(partial_hash);
                        m_grid[loc.y][loc.x] = 'O';
                    }
                }
                if m_verbose {
                    print_grid();
                }
                return visited.size();
            }
            else {
                return winning_score;
            }
        }

        explore: (inout this, position: coords, direction: coords, inpath: std::vector<coords>, score: int) = {
            if m_grid[position.y][position.x] != '#' {
                visited := shared.new<std::vector<coords>>();
                _ = visited*.insert(visited*.end(), inpath.begin(), inpath.end());
                visited*.push_back(position);
                outpath := path(position, direction, visited); 
                // Before we just add ourselves, let's see if there's someone else doing it too.
                found: bool = false;
                for m_scores[score] do (inout path_) {
                    if path_.position == position && path_.direction == direction {
                        found = true;
                        _ = path_.visited*.insert(path_.visited*.end(), visited*.begin(), visited*.end());
                        if m_verbose {
                            std::cout << "Exploring to ((position.x)$, (position.y)$) facing ((direction.x)$, (direction.y)$) with score (score)$ by hitching a ride" << std::endl;
                        }
                        break;
                    }
                }
                if !found {
                    m_scores[score].push_back(outpath);
                    if m_verbose {
                        std::cout << "Exploring to ((position.x)$, (position.y)$) facing ((direction.x)$, (direction.y)$) with score (score)$" << std::endl;
                    }
                }
            }
        }

        print_grid: (this) = {
            for m_grid do (line) {
                for line do (entry) {
                    std::cout << entry;
                }
                std::cout << std::endl;
            }
            std::cout << std::endl;
        }


        run : (override inout this) -> i64 = {
            total : i64 = 0;

            for m_lines do (line) {
                _ = m_grid.push_back(std::vector(line.begin(), line.end()));
            }

            // OK, let's get started. First find the start.
            maybe_reindeer : std::optional<coords> = std::nullopt;
            for 0..<m_grid.size() do (ry: int) {
                for 0 ..< m_grid[ry].size() do (rx: int) {
                    if m_grid[ry][rx] == 'S' {
                        maybe_reindeer = coords(rx, ry);
                        break;
                    }
                }
            }
            assert(maybe_reindeer);
            reindeer := maybe_reindeer*;
            if m_verbose {
                print_grid();
            }
            direction := coords(1, 0);
            total = find_best_move(reindeer, direction);
            return total;
        }
    }
}