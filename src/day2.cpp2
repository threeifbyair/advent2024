export module Day2;
import Advent2024;
import parser;

bp: namespace == boost::parser;

cpp2: namespace = {
    to_string : (vec : std::vector<int>) -> std::string = {
        retval : std::string = "[";
        for vec do (val) {
            retval += "(val)$, ";
        }
        if retval.ssize() > 2 {
            _ = retval.erase(retval.ssize() - 2, 2);
        }
        retval += "]";
        return retval;
    }
}

Day2: namespace = {

    export day : type = {
        this: Advent2024::day;

        operator= : (out this,  lines, part_two, verbose, argint) = {
            Advent2024::day = (lines, part_two, verbose, argint);
        }

        unsafe_offset : (this, levels: std::vector<int>) -> std::optional<int> = {
            if levels[1] == levels[0] {
                if m_verbose {
                    std::cout << "Initial values (levels[0])$ and (levels[1])$ are equal, not safe" << std::endl;
                }
                return 0;    
            }
            else {
                mindiff := -3;
                maxdiff := -1;
                if levels[1] > levels[0] {
                    mindiff = 1;
                    maxdiff = 3;
                }
                liter := levels.begin();
                lastlevel := levels[0];
                liter++;
                offset := 1;
                while liter != levels.end()
                next offset++
                {
                    diff := liter* - lastlevel;
                    if mindiff <= diff <= maxdiff {
                        lastlevel = liter*;
                        liter++;
                    }
                    else {
                        if m_verbose {
                            std::cout << "Neighboring values (lastlevel)$ and (liter*)$ not within diff range (mindiff)$ -> (maxdiff)$, not safe" << std::endl;
                        }
                        return offset;
                    }
                }
                return std::nullopt;
            }
        }

        run : (override inout this) -> i64 = {
            
            total : i64 = 0;

            for m_lines do (line) {
                // Each line contains 'Game <number>: <turn>; <turn>; <turn>'
                // A turn is <dice>, <dice>, <dice>
                // A dice is <number> <word>
                levels : std::vector<int> = ();
                if !bp::parse(line, bp::int_*, bp::ws, levels) {
                    std::cerr << "Parsing failure on *(line)$*!" << std::endl;
                    exit(1);
                }
                safe := true;
                if m_verbose {
                    std::cout << "Processing vector (levels)$... ";
                }
                if levels.ssize() < 2 {
                    if m_verbose {
                        std::cout << "Too small at (levels.size())$, not safe" << std::endl;
                    }
                    safe = false;
                }
                else {
                    offset := unsafe_offset(levels);
                    if offset != std::nullopt {
                        if m_part_two {
                            // Remove 0, 1, offset-1 and offset and see if it helps. (Why 0 and 1? Because they set the monotonicity.)
                            to_remove : std::set<int> = (0, 1, offset as int);
                            if offset > 0 {
                                _ = to_remove.insert(offset as int - 1);
                            }
                            safe = false;
                            for to_remove do (remove) {
                                tryvec := levels;
                                _ = tryvec.erase(tryvec.begin() + remove);
                                if m_verbose {
                                    std::cout << "Reprocessing vector (tryvec)$... ";
                                }
                                if unsafe_offset(tryvec) == std::nullopt {
                                    // We got one!
                                    safe = true;
                                    break;
                                }
                            }
                        }
                        else
                        {
                            safe = false;
                        }
                    }
                }
                if safe {
                    if m_verbose {
                        std::cout << "safe" << std::endl;
                    }
                    total++;
                }
            }
            return total;
        }
    }
}