export module Advent2024;

cpp2: namespace = {
    export to_string : <T: type> (vec : std::vector<T>) -> std::string = {
        outstr : std::string = "[";
        first := true;
        for vec do (val) {
            if first {
                first = false;
            }
            else {
                outstr += ", ";
            }
            outstr += cpp2::to_string(val) ;
        }
        outstr += "]";
        return outstr;
    }

    export to_string : <T: type, U: type> (vec : std::unordered_map<T,U>) -> std::string = {
        outstr : std::string = "{";
        first := true;
        for vec do (val) {
            if first {
                first = false;
            }
            else {
                outstr += ", ";
            }
            outstr += cpp2::to_string(val.first) + ": " + cpp2::to_string(val.second) ;
        }
        outstr += "}";
        return outstr;
    }

}

Advent2024: namespace = {
    export day : type = {
        protected m_lines: std::vector<std::string>;
        protected m_part_two : bool;
        protected m_verbose : bool;
        protected m_argint : int;
        operator= : (out this, lines, part_two, verbose, argint) = {
            m_lines = lines;
            m_part_two = part_two;
            m_verbose = verbose;
            m_argint = argint;
        }
        run : (virtual inout this) -> i64;
        operator=: (virtual move this) = {}
    }

    export today_fn : type == (lines: std::vector<std::string>, part_two: bool, verbose: bool, argint: int) -> std::unique_ptr<day>;
}