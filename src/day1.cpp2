export module Day1;
import Advent2024;
import parser;

bp: namespace == boost::parser;

Day1: namespace = {
    export day : type = {
        this: Advent2024::day;

        operator= : (out this,  lines, part_two, verbose, argint) = {
            Advent2024::day = (lines, part_two, verbose, argint);
        }

        run : (override inout this) -> int = {
            
            total : int = 0;
            left : std::vector<int> = ();
            right : std::vector<int> = ();
            roccur : std::unordered_map<int, int> = ();
            line_p :=  bp::int_ >> bp::int_;

            for m_lines do (line) {
                parsed_line : std::pair<int, int> = ();
                if !bp::parse(line, line_p, bp::ws, parsed_line) {
                    std::cerr << "Parsing failure on *(line)$*!" << std::endl;
                    exit(1);
                }
                left.push_back(parsed_line.first);
                right.push_back(parsed_line.second);
                roccur[parsed_line.second]++;
            }
            std::sort(left.begin(), left.end());
            std::sort(right.begin(), right.end());
            riter := right.begin();
            for left do (lval) {
                rval := riter*;
                dist := std::abs(rval - lval);
                //std::cout << "Left (lval)$ Right (rval)$ Dist (dist)$" << std::endl;
                if m_part_two {
                    total += lval * roccur[lval];
                }
                else {
                    total += dist;
                }
                riter++;
            } 
            return total;
        }
    }
}