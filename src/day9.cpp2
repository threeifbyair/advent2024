export module Day9;
import Advent2024;

Day9: namespace = {
    export day : type = {
        this: Advent2024::day;

        operator= : (out this,  lines, part_two, verbose, argint) = {
            Advent2024::day = (lines, part_two, verbose, argint);
        }

        coords: type == std::pair<int,int>;

        run : (override inout this) -> i64 = {
            total: i64 = 0;
            fileid: int = 0;
            disk: std::vector<std::optional<int>> = ();

            file_next := true;
            for m_lines[0] do (ch) {
                val: int = ch - '0';
                for 0..<val do (_) {
                    if file_next {
                        disk.push_back(fileid);
                    }
                    else {
                        disk.push_back(std::nullopt);
                    }
                }
                if file_next {
                    fileid++;
                }
                file_next = !file_next;
            }

            if m_verbose {
                std::cout << "Disk is: (disk)$" << std::endl;
            }

            // And now defrag it.
            offset : size_t = 0;
            while offset < disk.size() {
                if disk[offset] != std::nullopt {
                    offset++;
                    continue;
                }
                // We have a gap. Grab the end and move it forward.
                disk[offset] = disk[disk.size()-1];
                assert(disk[offset] != std::nullopt);
                disk.resize(disk.size()-1);
                while disk[disk.size()-1] == std::nullopt {
                    disk.resize(disk.size()-1);
                }
                if m_verbose {
                    std::cout << "Disk now: (disk)$" << std::endl;
                }
                offset++;
            }


            for 0..<disk.size() do (i) {
                if disk[i] != std::nullopt {
                    total += i * disk[i]*;
                }
                else {
                    // After defrag we should uncomment this.
                    assert(false);
                }
            }

            return total;
        }
    }
}
